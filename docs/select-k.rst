
.. _select-k:

*************
Selecting *K*
*************

General comments
================

The number of factors, *K*, determines scHPF's granularity. An appropriate
number of factors depends on both the data being fit and the intended
application of the scHPF model.  In our experience, subsequent analyses on cell
scores (eg. UMAP) are stable across a reasonable range of *K*, while
interpretability (gene scores) can be more *K*-dependent.


.. _k-workflow:

Example workflow
================

To maximize interpretability while being somewhat quantitative about choosing a
number of factors, we usually train scHPF across a range of values of *K*, and
select *K* using a heuristic suitable to our intended application
(:ref:`examples<k-criteria>`). An example workflow might be:

    1. Choose a suitable selection criteria for the problem at hand 
       (:ref:`examples<k-criteria>`).

    2. Guess a number of factors, |K_0|, greater than the number of
       well-defined cell types in the data. I usually choose something between 
       5 and 15 for datasets with a couple cell types, and something between 10 
       and 20 for datasets with many types.

    3. :ref:`Train<train-cli>` an scHPF model for |K_0|, and sanity check 
       results using the ranked_genes.txt file generated by |scHPF score|_.

    4. Guess a minimum number of factors, |K_min|, usually greater than the
       number of cell types in the data. Guess a maximum number of factors, 
       |K_max|, not worrying too much if we are low since we'll refine later.

    5. Train scHPF models for range(|K_min|,  |K_max|,  step_size) for some
       reasonable step_size.

    6. Evaluate the models using the selection criteria from 1. Expand/refine
       the range accordingly, possibly reducing the step_size for better 
       coverage. For example, if the largest *K* passing the criteria is 
       |K_max|, we should increase |K_max|.

    7. Repeat 4-6 as needed. 
      
.. |K_0| replace:: *K*:sub:`0`

.. |K_min| replace:: *K*:sub:`min`

.. |K_max| replace:: *K*:sub:`max`

.. _k-criteria:

Example selection criteria
===========================

.. _type-rep:

1. Cell type representation
---------------------------

To best illustrate how scHPF recapitulates and expands upon clustering in our
initial paper, we chose *K* based on the model's representation of cell types
in the data [Levitin2019]_.  Specifically, we selected the smallest *K* such
that every well-defined cell type was most strongly associated with a unique
factor `[Levitin2019, Appendix Figure S8]`_.  This method can work well when
many well-defined cell types are present, but depends on the quality and
granularity of clustering. It is also difficult to standardize across multiple
models trained on different data.

.. _[Levitin2019, Appendix Figure S8]: https://www.embopress.org/action/downloadSupplement?doi=10.15252%2Fmsb.20188557&file=msb188557-sup-0001-Appendix.pdf


.. figure:: ./img/cell-type-rep-01.png

     Median factor score in each cluster in a high-grade glioma at 12, 13, and
     14 factors in [Levitin2019]_. At 14 factors, all clusters are most closely
     associated with at least one unique factor.


.. _signature-overlap:

.. sidebar:: Evaluating top gene overlap

    .. figure:: ./img/k_selection_minifig-01.png
        
    Hypergeometric -log10 *p*-value of the maximum pairwise overlap
    of the highest scoring genes in each factor for Donor 2 Bone Marrow in
    [SzaboLevitin2019]_ at different values of *K*.

2. Gene signature overlap
-------------------------

To find common patterns of gene expression across multiple models in
[SzaboLevitin2019]_, we selected *K* such that factors in the same model did
not have significant overlap in their top genes. This reflected our prior that
programs should be distinct, and the further requirement that models should
have similar granularity across datasets with different levels of complexity.  

We note that this method can result in lower granularity programs for some
datasets, as it is explicitly avoids overlapping genes. Using 
:ref:`cellular resolution<cell-res>` or 
:ref:`cell type respresentation<type-rep>` may find higher resolution programs.

The |scHPF score|_ command automatically produces a file with maximum pairwise 
overlaps and hypergeometric p values at different thresholds for top genes.


.. |scHPF score| replace:: ``scHPF score``
.. _scHPF score: score-cli.html


.. _cell-res:


3. Cellular resolution
----------------------

Cellular resolution directly evaluates a model's granularity by specifying how
many factors, on average, should explain a given portion of a cell's total cell
scores.  We have found it useful in cases where we are interested in higher
granularity than we find with 
:ref:`gene signature overlap<signature-overlap>`.

We define cellular resolution as the maximum *K* such that, on average, cells'
*n* highest scoring factors contain at least *r*\*100 percent of its total
score across all factors.  So if we want to find a model where the 3 factors
with the highest score in a cell contain at least 70% of its total score (on
average), *n* would be 3 and *r* would be 0.7.

We can evaluate cellular resolution using one of |scHPF score|_'s  outputs, a
file called *mean_cellscore_fraction.txt* (potentially with a prefix). The
file's two columns, *nfactors* and *mean_cellscore_fraction*, represent the
mean fraction of each cell's total cell score allocated to its top *nfactors*
factors.  If we want to find a model at *n* =3 and *r* =0.7 resolution, we
might follow the :ref:`example workflow<k-workflow>` above, and select the
largest *K* such that *mean_cellscore_fraction* >= 0.7 when *nfactors* = 3.
